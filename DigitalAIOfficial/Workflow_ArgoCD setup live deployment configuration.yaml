# Exported from:        http://MBP-Marin:5516/
# Release version:      24.1.0
# Date created:         Wed Oct 09 16:14:03 CEST 2024

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  path: /
  home: Digital.ai - Official
spec:
- template: ArgoCD setup live deployment configuration
  description: Create or update ArgoCD live deployment configuration
  scheduledStartDate: 2024-10-09T16:10:17.394+02:00
  dueDate: 2024-10-09T17:10:17.394+02:00
  phases:
  - phase: Input
    tasks:
    - name: Check if remote runner exists
      type: xlrelease.ScriptTask
      description: Checks if an enabled remote runner is present in the system.
      script: |-
        def check_runners(runners):
          for runner in runners:
            if runner["enabled"] and "remote" in runner["capabilities"]:
              return True
          return False

        runners = configurationApi.searchByTypeAndTitle("xlrelease.JobRunner", "")

        if not check_runners(runners):
          raise Exception("There is no job runner with 'remote' capability enabled")
    - name: Fetch details
      type: xlrelease.ScriptTask
      description: Fetches details about target server.
      script: |-
        statusWebhookEventSource = configurationApi.getConfiguration("${statusWebhookEventSourceId}")
        sourceServer = statusWebhookEventSource["sourceServer"]

        releaseVariables['targetServerTitle'] = sourceServer.title
        releaseVariables['targetServerUrl'] = sourceServer.url
        releaseVariables['statusWebhookEventSourceFolderId'] = statusWebhookEventSource.folderId

        if "${liveDeploymentConfigurationId}":
          liveDeploymentConfiguration = configurationApi.getConfiguration("${liveDeploymentConfigurationId}")
          releaseVariables['liveDeploymentConfigurationName'] = liveDeploymentConfiguration.title
          releaseVariables['liveDeploymentConfigurationApplication'] = liveDeploymentConfiguration.application
    - name: Live deployment configuration name
      type: xlrelease.UserInputTask
      description: |-
        Add a name for your live deployment configuration.

        **Target: ${targetServerTitle}**
        ${targetServerUrl}
      variables:
      - liveDeploymentConfigurationName
    - name: Live deployment configuration filter
      type: xlrelease.UserInputTask
      description: Input the ArgoCD application filter to select applications from
        the deployment provider for live deployments.
      variables:
      - liveDeploymentConfigurationApplication
    color: "#3d6c9e"
  - phase: Autoconfiguration
    tasks:
    - name: Create or update live deployment configuration
      type: xlrelease.ScriptTask
      description: Creates a LiveDeploymentConfiguration with provided inputs and
        adds it to the list of configs on selected StatusWebhookEventSource.
      script: |-
        from com.xebialabs.xlrelease.domain import Configuration
        from com.xebialabs.deployit.plugin.api.reflect import Type

        if "${liveDeploymentConfigurationId}":
          liveDeploymentConfiguration = configurationApi.getConfiguration("${liveDeploymentConfigurationId}")
          liveDeploymentConfiguration.title = "${liveDeploymentConfigurationName}"
          liveDeploymentConfiguration.application = "${liveDeploymentConfigurationApplication}"

          configurationApi.updateConfiguration("${liveDeploymentConfigurationId}", liveDeploymentConfiguration)
        else:
          statusWebhookEventSource = configurationApi.getConfiguration("${statusWebhookEventSourceId}")

          liveDeploymentConfiguration = Configuration()
          liveDeploymentConfiguration.type = Type.valueOf("argocd.DeploymentConfig")
          liveDeploymentConfiguration.title = "${liveDeploymentConfigurationName}"
          liveDeploymentConfiguration.folderId = "${statusWebhookEventSourceFolderId}"
          liveDeploymentConfiguration.setProperty("application", "${liveDeploymentConfigurationApplication}")

          liveDeploymentConfiguration = configurationApi.addConfiguration(liveDeploymentConfiguration)

          liveDeploymentConfigs = statusWebhookEventSource.getProperty("liveDeploymentConfigs")
          liveDeploymentConfigs.add(liveDeploymentConfiguration)

          statusWebhookEventSource.setProperty("liveDeploymentConfigs", liveDeploymentConfigs)

          configurationApi.updateConfiguration("${statusWebhookEventSourceId}", statusWebhookEventSource)
    - name: Patch ArgoCD applications
      type: xlrelease.ScriptTask
      description: |-
        Patches ArgoCD applications by running a container script, adding the necessary annotation to enable live event notifications.

        The following annotation is applied to all apps matching the specified filter:
        `notifications.argoproj.io/subscribe.on-app-status-changed.release-webhook`
      script: "deploymentProviderApi.patchDeploymentProvider(\"${statusWebhookEventSourceId}\"\
        )"
    color: "#3d6c9e"
  kind: WORKFLOW
  tags:
  - Remote ArgoCD
  - deployment provider
  - config
  categories:
  - Application onboarding
  variables:
  - type: xlrelease.StringVariable
    key: statusWebhookEventSourceId
  - type: xlrelease.StringVariable
    key: liveDeploymentConfigurationId
    requiresValue: false
  - type: xlrelease.StringVariable
    key: liveDeploymentConfigurationName
    showOnReleaseStart: false
    label: Name
    description: The name of live deployment configuration
  - type: xlrelease.StringVariable
    key: liveDeploymentConfigurationApplication
    showOnReleaseStart: false
    label: Application
    description: Application name/regex in ArgoCD server
    value: .*
  - type: xlrelease.StringVariable
    key: targetServerTitle
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: targetServerUrl
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: statusWebhookEventSourceFolderId
    requiresValue: false
    showOnReleaseStart: false
  disableNotifications: true
  author: Digital.ai
  logo:
    type: xlrelease.TemplateLogo
    contentType: image/png
    file: !file "template-logo/e910f9df14912b9b3fb5ed0c54044b8d1a8fd710/argocd.svg"
  defaultTargetFolder: ./Workflow Executions
